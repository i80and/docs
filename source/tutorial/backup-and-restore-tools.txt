======================================
Back Up and Restore with MongoDB Tools
======================================

.. default-domain:: mongodb

This document describes the process for creating backups and restoring data
using the utilities provided with MongoDB.

Because all of these tools primarily operate by interacting with a running
:program:`mongod` instance, they can impact the performance of your
running database.

Not only do they create traffic for a running database instance, they also force
the database to read all data through memory. When MongoDB reads infrequently
used data, it can supplant more frequently accessed data, causing a
deterioration in performance for the database's regular workload.

No matter how you decide to import or export your data, consider the
following guidelines:

- Label files so that you can identify the contents of the export or
  backup as well as the point in time the export/backup reflect.

- Do not create or apply exports if the backup process itself will
  have an adverse effect on a production system.

- Make sure that the backups reflect a consistent data state. Export or backup
  processes can impact data integrity (i.e. type fidelity) and
  consistency if updates continue during the backup process.

- Test backups and exports by restoring and importing to ensure that
  the backups are useful.

.. seealso:: :doc:`/core/backups` or :mms:`MMS Backup Manual </tutorial/nav/backup-use/>`
   for more information on backing up MongoDB instances. Additionally,
   consider the following references for the MongoDB import/export
   tools:

   - :program:`mongoimport`
   - :program:`mongoexport`
   - :program:`mongorestore`
   - :program:`mongodump`

.. _binary-bson-dumps:

Binary BSON Dumps
-----------------

The :program:`mongorestore` and :program:`mongodump` utilities work with
:doc:`BSON </reference/bson-types>` data dumps, and are useful for creating
backups of small deployments. For resilient and non-disruptive backups, use a
file system or block-level disk snapshot function, such as the methods
described in the :doc:`/core/backups` document.

Use these tools for backups if other backup methods, such as the
:mms-home:`MMS Backup Service </>` or
:doc:`file system snapshots </tutorial/backup-with-filesystem-snapshots>`
are unavailable.

.. _backup-mongodump:
.. _backup-and-restore-tools:

Backup a Database with ``mongodump``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-mongodump-local-database.rst

.. include:: /includes/access-mongodump-collections.rst

.. include:: /includes/access-mongodump-users.rst

Basic ``mongodump`` Operations
``````````````````````````````

The :program:`mongodump` utility backs up data by connecting to a
running :program:`mongod` or :program:`mongos` instance.

The utility can create a backup for an entire server, database or collection,
or can use a query to backup just part of a collection.

When you run :program:`mongodump` without any arguments, the command
connects to the MongoDB instance on the local system
(e.g. ``127.0.0.1`` or ``localhost``) on port ``27017`` and creates a
database backup named ``dump/`` in the current directory.

To backup data from a :program:`mongod` or :program:`mongos` instance
running on the same machine and on the default port of ``27017``,
use the following command:

.. code-block:: sh

   mongodump

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

You can also specify the :option:`--host <mongodump --host>` and
:option:`--port <mongodump --port>` of the MongoDB instance that the
:program:`mongodump` should connect to. For example:

.. code-block:: sh

   mongodump --host mongodb.example.net --port 27017

:program:`mongodump` will write :term:`BSON` files that hold a copy of
data accessible via the :program:`mongod` listening on port ``27017`` of
the ``mongodb.example.net`` host. See :ref:`backup-from-non-local` for more
information.

To specify a different output directory, you can use the :option:`--out
or -o <mongodump --out>` option:

.. code-block:: sh

   mongodump --out /data/backup/

To limit the amount of data included in the database dump, you can
specify :option:`--db <mongodump --db>` and
:option:`--collection <mongodump --collection>` as options to
:program:`mongodump`. For example:

.. code-block:: none

   mongodump --collection myCollection --db test

This operation creates a dump of the collection named ``myCollection``
from the database ``test`` in a :file:`dump/` subdirectory of the
current working directory.

.. include:: /includes/fact-mongodump-overwrite-files.rst

Point in Time Operation Using Oplogs
````````````````````````````````````

Use the :option:`--oplog <mongodump --oplog>` option with
:program:`mongodump` to collect the :term:`oplog` entries to build a
point-in-time snapshot of a database within a replica set. With :option:`--oplog
<mongodump --oplog>`, :program:`mongodump` copies all the data from
the source database as well as all of the :term:`oplog` entries from
the beginning to the end of the backup procedure. This operation, in
conjunction with :option:`mongorestore --oplogReplay <mongorestore --oplogReplay>`,
allows you to restore a backup that reflects the specific
moment in time that corresponds to when :program:`mongodump` completed
creating the dump file.

.. _backup-from-non-local:

Create Backups from Non-Local ``mongod`` Instances
``````````````````````````````````````````````````

The :option:`--host <mongodump --host>` and
:option:`--port <mongodump --port>` options for
:program:`mongodump` allow you to connect to and backup from a remote host.
Consider the following example:

.. code-block:: sh

   mongodump --host mongodb1.example.net --port 3017 --username user --password pass --out /opt/backup/mongodump-2013-10-24

On any :program:`mongodump` command you may, as above, specify username
and password credentials to specify database authentication.

.. _backup-restore-dump:

Restore a Database with ``mongorestore``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-mongorestore-collections.rst

.. include:: /includes/access-mongorestore-users.rst

Basic ``mongorestore`` Operations
`````````````````````````````````

The :program:`mongorestore` utility restores a binary backup created by
:program:`mongodump`. By default, :program:`mongorestore` looks for a
database backup in the :file:`dump/` directory.

The :program:`mongorestore` utility restores data by connecting to a
running :program:`mongod` or :program:`mongos` directly.

:program:`mongorestore` can restore either an entire database backup
or a subset of the backup.

To use :program:`mongorestore` to connect to an active
:program:`mongod` or :program:`mongos`, use a command with the following prototype form:

.. code-block:: sh

   mongorestore --port <port number> <path to the backup>


Consider the following example:

.. code-block:: sh

   mongorestore dump-2013-10-25/

Here, :program:`mongorestore` imports the database backup in
the :file:`dump-2013-10-25` directory to the :program:`mongod` instance
running on the localhost interface.

.. _backup-restore-oplogreplay:

Restore Point in Time Oplog Backup
``````````````````````````````````

If you created your database dump using the :option:`--oplog
<mongodump --oplog>` option to ensure a point-in-time snapshot, call
:program:`mongorestore` with the
:option:`--oplogReplay <mongorestore --oplogReplay>`
option, as in the following example:

.. code-block:: sh

   mongorestore --oplogReplay

You may also consider using the :option:`mongorestore --objcheck`
option to check the integrity of objects while inserting them into the
database, or you may consider the :option:`mongorestore --drop` option to drop each
collection from the database before restoring from
backups.

Restore Backups to Non-Local ``mongod`` Instances
`````````````````````````````````````````````````

By default, :program:`mongorestore` connects to a MongoDB instance
running on the localhost interface (e.g. ``127.0.0.1``) and on the
default port (``27017``). If you want to restore to a different host or
port, use the :option:`--host <mongorestore --host>` and :option:`--port
<mongorestore --port>` options.

Consider the following example:

.. code-block:: sh

   mongorestore --host mongodb1.example.net --port 3017 --username user --password pass /opt/backup/mongodump-2013-10-24

As above, you may specify username and password connections if your
:program:`mongod` requires authentication.

.. _human-intelligible-exports:

Human Intelligible Import/Export Formats
----------------------------------------

MongoDB's :program:`mongoimport` and :program:`mongoexport` tools allow you to
work with your data in a human-readable
:doc:`Extended JSON </reference/mongodb-extended-json>` or :term:`CSV` format.
This is useful for simple ingestion to or from a third-party system, and when
you want to backup or export a small subset of your data. For more complex data
migration tasks, you may want to write your own import and export scripts using
a client :term:`driver` to interact with the database.

The examples in this section use the MongoDB tools
:program:`mongoimport` and
:program:`mongoexport`. These tools may also be useful
for importing data into a MongoDB database from third party
applications.

If you want to simply copy a database or collection from one instance
to another, consider using the :dbcommand:`copydb`, :dbcommand:`clone`,
or :dbcommand:`cloneCollection` commands, which may be more suited to
this task. The :program:`mongo` shell provides the
:method:`db.copyDatabase()` method.

.. warning::

   .. include:: /includes/fact-type-fidelity-loss.rst

Collection Export with :program:`mongoexport`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-mongoexport-usage.rst

Collection Import with :program:`mongoimport`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-mongoimport-usage.rst
